# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main
# - azure-pipelines

pool:
  vmImage: 'windows-latest'

parameters:
- name: nugetPush
  displayName: 'Push created nuget package to nuget.org'
  type: boolean
  default: false

variables:
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: appxPackageDir
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'
- name: BuildID
  value: '$(Build.BuildID)'
- name: Packageappxmanifest
  value: Package.appxmanifest

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

steps:

- task: PowerShell@2
  name: setvariable
  displayName: 'setting variables MajorVersion, MinorVersion, DayOfMonth'
  inputs:
    targetType: 'inline'
    script: |
      $year=$(Get-Date -Format 'yy')
      Write-Host $year
      Write-Host "##vso[task.setvariable variable=MajorVersion]$year"
      $month=[datetime]::Today.Month.ToString('0') 
      Write-Host $month
      Write-Host "##vso[task.setvariable variable=MinorVersion]$month"
      $day=$(Get-Date -Format 'dd')
      Write-Host $day
      Write-Host "##vso[task.setvariable variable=DayOfMonth]$day"
      $version="$year.$month.$(BuildID).0"
      Write-Host $version
      Write-Host "##vso[task.setvariable variable=version]$version"

- task: PowerShell@2
  displayName: 'pump version to $(version)'
  inputs:
    workingDirectory: '$(Build.SourcesDirectory)'
    targetType: 'inline'
    script: |
      Write-Host "Set version: $(version)"
      $version = "$(version)"
      $outputversion = "$(version)"

      # Apply the version to the assembly property files
      $VersionRegex = "\d+\.\d+\.\d+\.\d+"
      $assemblyInfoFiles = gci . -recurse -include "*Properties*","My Project" | 
          ?{ $_.PSIsContainer } | 
          foreach { gci -Path $_.FullName -Recurse -include AssemblyInfo.* }
      
      if($assemblyInfoFiles)
      {
          Write-Host "Will apply $AssemblyVersion to $($assemblyInfoFiles.count) Assembly Info Files."
      
          foreach ($file in $assemblyInfoFiles) {
              $filecontent = Get-Content($file)
              attrib $file -r
              $filecontent -replace $VersionRegex, $version  | Out-File $file utf8
      
              Write-Host "$file.FullName - $version version applied"
          }
      }
      else
      {
          Write-Warning "No Assembly Info Files found."
      }

- task: DotNetCoreCLI@2
  displayName: 'restore'
  inputs:
    command: 'restore'
    projects: '**/*.sln'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'build $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration=$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'build Debug'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration=Debug'

- task: DotNetCoreCLI@2
  displayName: 'pack nuget'
  inputs:
    command: 'pack'
    packagesToPack: '**/Console.Extensions.csproj;**/Blzr.Console.csproj;'
    #includesymbols: true
    #includesource: true
    versioningScheme: 'byBuildNumber'

- task: NuGetCommand@2
  displayName: 'upload nuget package to nuget.org'
  condition: and(succeeded(), eq(${{ parameters.nugetPush }}, 'true'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget.org'


- task: ArchiveFiles@2
  displayName: 'archiv'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/a.zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  condition: succeededOrFailed()
  displayName: "Upload Artifacts"
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/a.zip' 
